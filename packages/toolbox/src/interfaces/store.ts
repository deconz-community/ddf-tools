/**
 * This file is automatically generated by the `@indirectus/cli` package.
 * Follow the package's instruction to update this file with the latest schema.
 */

import type * as Directus from "@directus/sdk";
import type { Query as Query$ } from "@directus/sdk";
import {
  readSingleton as readSingleton$,
  readItems as readItems$,
  readItem as readItem$,
} from "@directus/sdk";

export namespace Types {
  // Internal
  export type Nullable<T> = T | null;
  export type Optional<T> = Nullable<T>;
  export type UnknownType<T> = T | unknown;

  // Numbers
  export type BigInteger = number;
  export type Decimal = number;
  export type Float = number;
  export type Integer = number;
  export type Number = number;

  // Buffers
  export type Binary = string;
  export type String = string;
  export type Text = string;

  // Date & Time
  export type Date = string | globalThis.Date;
  export type DateTime = string | globalThis.Date;

  // Geometry
  export namespace Geometry {
    export type LineString = any;
    export type MultiLineString = any;
    export type MultiPoint = any;
    export type MultiPolygon = any;
    export type Point = any;
    export type Polygon = any;
  }

  // Complex
  export type JSON = any;
  export type JSONSchema = any;

  // Others
  export type UUID = string;
  export type Boolean = boolean;
}

/**
 * System collections.
 */

export namespace Collections {
  /**
   * The resolved directus activity collection type.
   *
   */
  export type DirectusActivity = Directus.DirectusActivity<Schema>;

  /**
   * The resolved directus collections collection type.
   *
   */
  export type DirectusCollection = Directus.DirectusCollection<Schema>;

  /**
   * The resolved directus fields collection type.
   *
   */
  export type DirectusField = Directus.DirectusField<Schema>;

  /**
   * The resolved directus files collection type.
   *
   */
  export type DirectusFile = Directus.DirectusFile<Schema>;

  /**
   * The resolved directus folders collection type.
   *
   */
  export type DirectusFolder = Directus.DirectusFolder<Schema>;

  /**
   * The resolved directus permissions collection type.
   *
   */
  export type DirectusPermission = Directus.DirectusPermission<Schema>;

  /**
   * The resolved directus presets collection type.
   *
   */
  export type DirectusPreset = Directus.DirectusPreset<Schema>;

  /**
   * The resolved directus relations collection type.
   *
   */
  export type DirectusRelation = Directus.DirectusRelation<Schema>;

  /**
   * The resolved directus revisions collection type.
   *
   */
  export type DirectusRevision = Directus.DirectusRevision<Schema>;

  /**
   * The resolved directus roles collection type.
   *
   */
  export type DirectusRole = Directus.DirectusRole<Schema>;

  /**
   * The resolved directus settings collection type.
   *
   */
  export type DirectusSettings = Directus.DirectusSettings<Schema>;

  /**
   * The extra fields added to the directus users collection.
   *
   */
  export interface ExtraDirectusUser {
    avatar_url: Types.Optional<Types.String>;
    private_key: Types.Optional<Types.String>;
    public_key: Types.Optional<Types.String>;
  }

  /**
   * The resolved directus users collection type.
   *
   */
  export type DirectusUser = Directus.DirectusUser<Schema>;

  /**
   * The resolved directus webhooks collection type.
   *
   */
  export type DirectusWebhook = Directus.DirectusWebhook<Schema>;

  /**
   * The resolved directus dashboards collection type.
   *
   */
  export type DirectusDashboard = Directus.DirectusDashboard<Schema>;

  /**
   * The resolved directus panels collection type.
   *
   */
  export type DirectusPanel = Directus.DirectusPanel<Schema>;

  /**
   * The resolved directus notifications collection type.
   *
   */
  export type DirectusNotification = Directus.DirectusNotification<Schema>;

  /**
   * The resolved directus shares collection type.
   *
   */
  export type DirectusShare = Directus.DirectusShare<Schema>;

  /**
   * The resolved directus flows collection type.
   *
   */
  export type DirectusFlow = Directus.DirectusFlow<Schema>;

  /**
   * The resolved directus operations collection type.
   *
   */
  export type DirectusOperation = Directus.DirectusOperation<Schema>;

  /**
   * The resolved directus translations collection type.
   *
   */
  export type DirectusTranslation = Directus.DirectusTranslation<Schema>;

  /**
   * The resolved directus versions collection type.
   *
   */
  export type DirectusVersion = Directus.DirectusVersion<Schema>;

  /**
   * The resolved directus extensions collection type.
   *
   */
  // export type DirectusExtension = Directus.DirectusExtension<Schema>;
}

/**
 * User collections.
 */
export namespace Collections {
  /**
   * The bundles collection.
   */
  export interface Bundles {
    id: Types.String;
    ddf_uuid: Types.String;
    product: Types.String;
    tag: Types.Optional<"alpha" | "beta" | "latest" | Types.String>;
    version: Types.String;
    version_deconz: Types.String;
    user_created: Types.Optional<Types.String | Collections.DirectusUser>;
    date_created: Types.Optional<Types.DateTime>;
    user_updated: Types.Optional<Types.String | Collections.DirectusUser>;
    date_updated: Types.Optional<Types.DateTime>;
    device_identifiers: BundlesDeviceIdentifiers;
    sub_devices: BundlesSubDevices;
    signatures: Signatures;
    content: Types.Optional<Types.String>;
  }

  /**
   * The bundles device identifiers collection.
   */
  export interface BundlesDeviceIdentifiers {
    id: Types.Integer;
    bundles_id: Types.Optional<Types.String | Bundles>;
    device_identifiers_id: Types.Optional<Types.String | DeviceIdentifiers>;
  }

  /**
   * The bundles sub devices collection.
   */
  export interface BundlesSubDevices {
    id: Types.Integer;
    bundles_id: Types.Optional<Types.String | Bundles>;
    sub_devices_type: Types.Optional<Types.String | SubDevices>;
  }

  /**
   * The device identifiers collection.
   */
  export interface DeviceIdentifiers {
    id: Types.String;
    manufacturer: Types.Optional<Types.String>;
    model: Types.Optional<Types.String>;
    bundles: BundlesDeviceIdentifiers;
  }

  /**
   * The organizations collection.
   */
  export interface Organizations {
    id: Types.String;
    user_created: Types.Optional<Types.String | Collections.DirectusUser>;
    date_created: Types.Optional<Types.DateTime>;
    user_updated: Types.Optional<Types.String | Collections.DirectusUser>;
    date_updated: Types.Optional<Types.DateTime>;
    name: Types.String;
    members: OrganizationsDirectusUsers;
  }

  /**
   * The organizations directus users collection.
   */
  export interface OrganizationsDirectusUsers {
    id: Types.Integer;
    organizations_id: Types.Optional<Types.String | Organizations>;
    directus_users_id: Types.Optional<Types.String | DirectusUser>;
    role: Types.Optional<"owner" | "member" | Types.String>;
  }

  /**
   * The signatures collection.
   */
  export interface Signatures {
    id: Types.String;
    bundle: Types.String | Bundles;
    signature: Types.String;
    key: Types.String;
  }

  /**
   * The sub devices collection.
   */
  export interface SubDevices {
    type: Types.String;
    name: Types.String;
    endpoint: Types.Optional<"/lights" | "/sensors" | Types.String>;
    bundles: BundlesSubDevices;
  }
}

/**
 * System collections.
 */
export interface Schema {
  /**
   * The extended directus users collection.
   */
  directus_users: Collections.ExtraDirectusUser[];
}

/**
 * User collections.
 */
export interface Schema {
  /**
   * The bundles collection.
   */
  bundles: Collections.Bundles[];

  /**
   * The bundles device identifiers collection.
   */
  bundles_device_identifiers: Collections.BundlesDeviceIdentifiers[];

  /**
   * The bundles sub devices collection.
   */
  bundles_sub_devices: Collections.BundlesSubDevices[];

  /**
   * The device identifiers collection.
   */
  device_identifiers: Collections.DeviceIdentifiers[];

  /**
   * The organizations collection.
   */
  organizations: Collections.Organizations[];

  /**
   * The organizations directus users collection.
   */
  organizations_directus_users: Collections.OrganizationsDirectusUsers[];

  /**
   * The signatures collection.
   */
  signatures: Collections.Signatures[];

  /**
   * The sub devices collection.
   */
  sub_devices: Collections.SubDevices[];
}

/**
 * Helper functions
 */

/**
 * List bundles items.
 */
export function listBundles<
  const Query extends Query$<Schema, Collections.Bundles>,
>(query?: Query) {
  return readItems$<Schema, "bundles", Query>("bundles", query);
}

/**
 * Gets a single known bundles item by id.
 */
export function readBundles<
  const Query extends Query$<Schema, Collections.Bundles>,
>(key: string | number, query?: Query) {
  return readItem$<Schema, "bundles", Query>("bundles", key, query);
}

/**
 * List bundles device identifiers items.
 */
export function listBundlesDeviceIdentifiers<
  const Query extends Query$<Schema, Collections.BundlesDeviceIdentifiers>,
>(query?: Query) {
  return readItems$<Schema, "bundles_device_identifiers", Query>(
    "bundles_device_identifiers",
    query,
  );
}

/**
 * Gets a single known bundles device identifiers item by id.
 */
export function readBundlesDeviceIdentifiers<
  const Query extends Query$<Schema, Collections.BundlesDeviceIdentifiers>,
>(key: string | number, query?: Query) {
  return readItem$<Schema, "bundles_device_identifiers", Query>(
    "bundles_device_identifiers",
    key,
    query,
  );
}

/**
 * List bundles sub devices items.
 */
export function listBundlesSubDevices<
  const Query extends Query$<Schema, Collections.BundlesSubDevices>,
>(query?: Query) {
  return readItems$<Schema, "bundles_sub_devices", Query>(
    "bundles_sub_devices",
    query,
  );
}

/**
 * Gets a single known bundles sub devices item by id.
 */
export function readBundlesSubDevices<
  const Query extends Query$<Schema, Collections.BundlesSubDevices>,
>(key: string | number, query?: Query) {
  return readItem$<Schema, "bundles_sub_devices", Query>(
    "bundles_sub_devices",
    key,
    query,
  );
}

/**
 * List device identifiers items.
 */
export function listDeviceIdentifiers<
  const Query extends Query$<Schema, Collections.DeviceIdentifiers>,
>(query?: Query) {
  return readItems$<Schema, "device_identifiers", Query>(
    "device_identifiers",
    query,
  );
}

/**
 * Gets a single known device identifiers item by id.
 */
export function readDeviceIdentifiers<
  const Query extends Query$<Schema, Collections.DeviceIdentifiers>,
>(key: string | number, query?: Query) {
  return readItem$<Schema, "device_identifiers", Query>(
    "device_identifiers",
    key,
    query,
  );
}

/**
 * List organizations items.
 */
export function listOrganizations<
  const Query extends Query$<Schema, Collections.Organizations>,
>(query?: Query) {
  return readItems$<Schema, "organizations", Query>("organizations", query);
}

/**
 * Gets a single known organizations item by id.
 */
export function readOrganizations<
  const Query extends Query$<Schema, Collections.Organizations>,
>(key: string | number, query?: Query) {
  return readItem$<Schema, "organizations", Query>("organizations", key, query);
}

/**
 * List organizations directus users items.
 */
export function listOrganizationsDirectusUsers<
  const Query extends Query$<Schema, Collections.OrganizationsDirectusUsers>,
>(query?: Query) {
  return readItems$<Schema, "organizations_directus_users", Query>(
    "organizations_directus_users",
    query,
  );
}

/**
 * Gets a single known organizations directus users item by id.
 */
export function readOrganizationsDirectusUsers<
  const Query extends Query$<Schema, Collections.OrganizationsDirectusUsers>,
>(key: string | number, query?: Query) {
  return readItem$<Schema, "organizations_directus_users", Query>(
    "organizations_directus_users",
    key,
    query,
  );
}

/**
 * List signatures items.
 */
export function listSignatures<
  const Query extends Query$<Schema, Collections.Signatures>,
>(query?: Query) {
  return readItems$<Schema, "signatures", Query>("signatures", query);
}

/**
 * Gets a single known signatures item by id.
 */
export function readSignatures<
  const Query extends Query$<Schema, Collections.Signatures>,
>(key: string | number, query?: Query) {
  return readItem$<Schema, "signatures", Query>("signatures", key, query);
}

/**
 * List sub devices items.
 */
export function listSubDevices<
  const Query extends Query$<Schema, Collections.SubDevices>,
>(query?: Query) {
  return readItems$<Schema, "sub_devices", Query>("sub_devices", query);
}

/**
 * Gets a single known sub devices item by id.
 */
export function readSubDevices<
  const Query extends Query$<Schema, Collections.SubDevices>,
>(key: string | number, query?: Query) {
  return readItem$<Schema, "sub_devices", Query>("sub_devices", key, query);
}
